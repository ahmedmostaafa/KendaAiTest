using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Sirenix.OdinInspector;
using Sirenix.OdinInspector.Editor;
using UnityEditor;
using UnityEngine;

namespace KabreetGames.SceneManagement.Editor
{
    public class SceneGroupEditorWindow : OdinEditorWindow
    {
        public static bool IsPackage =>
            UnityEditor.PackageManager.PackageInfo.FindForAssembly(
                System.Reflection.Assembly.GetExecutingAssembly()) != null;
        
        [MenuItem("Kabreet Games/Scene Group Manager", priority = -100000000)]
        public static void Open()
        {
            var inspectorType = typeof(SceneView);
            var win = GetWindow<SceneGroupEditorWindow>(inspectorType);
            win.Show();
            win.titleContent.image = IsPackage
                ? AssetDatabase.LoadAssetAtPath<Texture2D>(
                    "Packages/com.kabreetgames.SceneLoaderSystem/Editor/Data/Icon/Window Icon.png")
                : AssetDatabase.LoadAssetAtPath<Texture2D>(
                    "Assets/Packages/Scene_Loader_System/Editor/Data/Icon/Window Icon.png");
        }


        protected override void OnEnable()
        {
            base.OnEnable();
            sceneGroupsData = SceneLoadingManager.GroupsData;
            if (sceneGroupsData != null) return;
            CreateData();
        }

        private void CreateData()
        {
            sceneGroupsData = CreateInstance<SceneGroupsData>();
            AssetDatabase.CreateAsset(sceneGroupsData, "Assets/Resources/SceneGroups.asset");
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            SceneLoadingManager.SetGroupsData(sceneGroupsData);
        }

        [InlineEditor(InlineEditorObjectFieldModes.CompletelyHidden)]
        public SceneGroupsData sceneGroupsData;

        protected override void Initialize()
        {
            WindowPadding = Vector4.one * 20;
        }
    }

    public class MyAssetPostprocessor : AssetPostprocessor
    {
        private static readonly string OutputPath =
            SceneGroupEditorWindow.IsPackage ? "Packages/com.kabreetgames.sceneloadersystem/Runtime/AutoGeneratedGroupNames/SceneGroupNames.cs":
            "Assets/Packages/Scene_Loader_System/Runtime/AutoGeneratedGroupNames/SceneGroupNames.cs";
    
        private static void OnPostprocessAllAssets(
            string[] importedAssets,
            string[] deletedAssets,
            string[] movedAssets,
            string[] movedFromAssetPaths)
        {
            var allAssets = new List<string>();
            allAssets.AddRange(importedAssets);
            allAssets.AddRange(deletedAssets);
            allAssets.AddRange(movedAssets);
            if(!allAssets.Any(p=> p.EndsWith("SceneGroups.asset"))) return; 
            var directoryPath = Path.GetDirectoryName(OutputPath);
            if (!Directory.Exists(directoryPath))
            {
                if (directoryPath != null) Directory.CreateDirectory(directoryPath);
            }
            
            var data = SceneLoadingManager.GroupsData;
            if(!CheckIfGroupNamesChanged(data)) return;
        
            // Create or overwrite the script file
            using var writer = new StreamWriter(OutputPath, false);
            writer.WriteLine("public enum SceneGroupNames");
            writer.WriteLine("{");
            if (data == null)
            {
                writer.WriteLine("}");
                AssetDatabase.Refresh();
                return;
            }

            try
            {
                foreach (var groupName in data.sceneGroups)
                {
                    var safeGroupName = groupName.groupName.Replace(" ", "").Replace("-", "");
                    writer.WriteLine($"    {safeGroupName},");
                }
            }
            catch (Exception e)
            {
                writer.WriteLine("}");
                AssetDatabase.Refresh();
                throw;
            }

        
            writer.WriteLine("}");
            AssetDatabase.Refresh();
        }

        private static bool CheckIfGroupNamesChanged(SceneGroupsData data)
        {
            if (data == null) return true;
            
            var groupNames = data.sceneGroups
                .Select(x => x.groupName)
                .ToArray();
            var currentGroupNames = Enum.GetNames(typeof(SceneGroupNames));
            return !groupNames.SequenceEqual(currentGroupNames);
        }
    }
}